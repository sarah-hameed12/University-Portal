"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-)ef0-5z4mskmuf53aem3z!&u6wpfl)5(napz)zf7!2ci#*qk6&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    'rest_framework_simplejwt', 
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'feed',
    'chatbot',
    'rest_framework',
    'corsheaders',
    'profiles',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         # Use JWT Authentication provided by simplejwt
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#         # You might keep SessionAuthentication if you use the Django Admin
#         # 'rest_framework.authentication.SessionAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         # Set a default permission policy (e.g., allow read-only by default)
#         'rest_framework.permissions.IsAuthenticatedOrReadOnly',
#      )
# }

# SIMPLE_JWT = {
#     "AUTH_HEADER_TYPES": ("Bearer",), # Standard JWT header type
#     "USER_ID_FIELD": "id",           # Field on the User model simplejwt should use (Django's default)
#     "USER_ID_CLAIM": "sub",          # The claim in the JWT payload containing the user's ID (Supabase typically uses 'sub' for UUID)

#     # --- Supabase Specific Validation ---
#     # You MUST get these from your Supabase Project Settings > API > JWT Settings
#     "AUDIENCE": "authenticated",        # Default Supabase audience, VERIFY THIS
#     "ISSUER": "https://iivokjculnflryxztfgf.supabase.co/auth/v1", # VERIFY THIS matches your project ref

#     # --- The Supabase JWT Secret ---
#     # DO NOT HARDCODE THIS! Use environment variables in production.
#     # Get this from Supabase Project Settings > API > JWT Settings > Secret
#     "SIGNING_KEY": "JcdSKvo3LDwxLqceKfqHnAwSDos5WPoxQCJ9ilkeYUUf48H+65EgHcJ/PxR21v0GNxzA7BRuFywRzhbmGmpQXw==", # <<<--- REPLACE AND SECURE THIS

#     # --- Algorithms ---
#     "ALGORITHM": "HS256", # Supabase default JWT algorithm

#     # Other settings can often be left as default
#     # "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Default is 5 minutes
#     # "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
# }
ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True
# import os
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
import os
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # Your React development server
#     "http://127.0.0.1:3000",
#     # Add your production frontend URL here later
# ]
CORS_ALLOW_ALL_ORIGINS = True

import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Load .env file
load_dotenv(os.path.join(BASE_DIR, '.env'))

# ... other settings ...

# Google AI API Key
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# Check if the key was loaded (optional sanity check)
if not GOOGLE_API_KEY:
    print("WARNING: GOOGLE_API_KEY not found in environment variables. Chatbot will not work.")